import maya.cmds as cmds

chainTypes = ('IK', 'FK', 'TG')

# Creating the Joint chains
for c in chainTypes:
    cmds.joint(n = 'c_' + c + '_shoulder_jnt', p = [0, 0, 0])
    cmds.joint(n = 'c_' + c + '_elbow_jnt', p = [7, 0, -1])
    cmds.joint('c_' + str(c) + '_shoulder_jnt', e = True, zso = True, oj = 'xyz', sao = 'yup')
    cmds.joint(n = 'c_' + c + '_wrist_jnt', p = [14, 0, 0])
    cmds.joint('c_' + str(c) + '_elbow_jnt', e = True, zso = True, oj = 'xyz', sao = 'yup')
    cmds.joint(n = 'c_' + c + '_wristEnd_jnt', p = [15, 0, 0])
    cmds.joint('c_' + str(c) + '_wrist_jnt', e = True, zso = True, oj = 'xyz', sao = 'yup')
    cmds.select(d=True)



## Creating the IK Arm ##
# Creating the IK handle

ikH = cmds.ikHandle( sj='c_IK_shoulder_jnt', ee='c_IK_wrist_jnt', p=2, w=.5, n = 'arm_ikHandle')

# Creating the IK Arm Control

ikControl = cmds.circle(n = 'ctrl_IK_arm', nr = (1,0,0))
ikGroup = cmds.group(ikControl, n = str(ikControl[0]) + '_grp')
# Query wrist location and rotation
pos = cmds.xform('c_IK_wrist_jnt', ws = True, q=True, t=True)
rot = cmds.xform('c_IK_wrist_jnt', ws = True, q=True, ro=True)

# Snap the group to the wrist joint
cmds.xform(ikGroup, t=pos, ws=True)
cmds.xform(ikGroup, ro=rot, ws=True)

# Constrain the handle to the control, and the control to the wrist rotation

cmds.pointConstraint(ikControl, ikH[0], mo=True)
cmds.orientConstraint(ikControl, 'c_IK_wrist_jnt', mo=True)

# Creating and Positioning PV
# Query shoulder position
sPos = cmds.xform('c_IK_shoulder_jnt', q = True, ws = True, t = True)
# Create the control
poleVector = cmds.circle(n = 'ctrl_PV_arm', nr = (0,0,1))
pvGroup = cmds.group(poleVector, n = str(poleVector[0]) + '_grp')

#Calculate the elbow spot and position it behind
midpoint = (pos[0] + sPos[0])/2

cmds.move(midpoint, 0, -3, pvGroup)

# Create PV Constraint
cmds.poleVectorConstraint(poleVector, ikH[0])

## Creating the FK Arm Controls ##
#Creating needed variables for naming and parenting controls in a hierarchy
cmds.select('c_FK_shoulder_jnt', hi = True)
fkJoints = cmds.ls(sl = True)
fkControls = []
counter = 0


for f in fkJoints:
    #Querying joint transforms for control placement.
    currentPos = cmds.xform(f, q = True, ws = True, t = True)
    currentRot = cmds.xform(f, q = True, ws = True, ro = True)
    #Splitting joint names for control naming.
    name = f.split('_')
    #Control creation.
    currentControl = cmds.circle(n = 'ctrl_' + name[1] + '_' + name[2], nr = (1,0,0))
    fkControls.append( currentControl )
    currentGroup = cmds.group(currentControl, n = str(currentControl[0]) + '_grp')
    cmds.xform(currentGroup, t = currentPos, ws = True)
    cmds.xform(currentGroup, ro = currentRot, ws = True)
    #If statement: So if theres a previously created fk control, the new one gets parented under it.
    if counter >= 1:
        cmds.parent(currentGroup, fkControls[counter-1])
    #Constraining control to joint    
    cmds.parentConstraint(currentControl, f, mo = True)
    del name
    cmds.select(d=True)
    counter += 1
    
    
# Binding both chains to target chain and creating blend control.

cmds.select('c_TG_shoulder_jnt', hi = True)
tgJoints = cmds.ls(sl = True)

# Creating an IK FK blend control
switchControl = cmds.circle(n = 'ctrl_IkFk_Switch', nr = (0,1,0))
switchGroup = cmds.group(switchControl, n = str(switchControl[0]) + '_grp')
cmds.move(0,0,-3, switchGroup)

#Creating the IK FK Blend Attribute
cmds.addAttr(switchControl, ln = 'ikFk_Switch', at = 'float', k = True, min = 0, max = 1)


#Creating blend colors nodes and connecting the ik and fk chains to the target chain
for t in tgJoints:
    nodeName = t.split('_')
    currentNode = cmds.shadingNode('blendColors', n = nodeName[2] + 'blend_bc', au = True)
    cmds.connectAttr(str(switchControl[0]) + '.ikFk_Switch', str(currentNode) + '.blender')
    cmds.connectAttr('c_IK_' +nodeName[2]+ '_jnt.rotateX', currentNode + '.color1R')
    cmds.connectAttr('c_IK_' +nodeName[2]+ '_jnt.rotateY', currentNode + '.color1G')
    cmds.connectAttr('c_IK_' +nodeName[2]+ '_jnt.rotateZ', currentNode + '.color1B')
    cmds.connectAttr('c_FK_' +nodeName[2]+ '_jnt.rotateX', currentNode + '.color2R')
    cmds.connectAttr('c_FK_' +nodeName[2]+ '_jnt.rotateY', currentNode + '.color2G')
    cmds.connectAttr('c_FK_' +nodeName[2]+ '_jnt.rotateZ', currentNode + '.color2B')
    cmds.connectAttr(currentNode + '.output.outputR', 'c_TG_' +nodeName[2]+ '_jnt.rotateX')
    cmds.connectAttr(currentNode + '.output.outputG', 'c_TG_' +nodeName[2]+ '_jnt.rotateY')
    cmds.connectAttr(currentNode + '.output.outputB', 'c_TG_' +nodeName[2]+ '_jnt.rotateZ')
    
#Cleaning up the Outliner and Scene
ikCGroup = cmds.group(ikGroup, pvGroup, n = 'ikControls_grp')
jntsGrp = cmds.group('c_IK_shoulder_jnt', 'c_FK_shoulder_jnt', 'c_TG_shoulder_jnt', n = 'joints_grp')
ikHGroup = cmds.group(ikH[0], n = 'nodes_grp')
cmds.group(ikCGroup, jntsGrp, ikHGroup, 'ctrl_FK_shoulder_grp', 'ctrl_IkFk_Switch_grp', n = 'arm_grp')
cmds.select(d=True)
cmds.setAttr('c_IK_shoulder_jnt.visibility', 0)
cmds.setAttr('c_FK_shoulder_jnt.visibility', 0)

#Control Visibility
cmds.setDrivenKeyframe('ctrl_FK_shoulder_grp.visibility', cd = 'ctrl_IkFk_Switch.ikFk_Switch', dv = 0, v = 1 )
cmds.setDrivenKeyframe('ctrl_FK_shoulder_grp.visibility', cd = 'ctrl_IkFk_Switch.ikFk_Switch',  dv = 1, v = 0 )
cmds.setDrivenKeyframe('ikControls_grp.visibility', cd = 'ctrl_IkFk_Switch.ikFk_Switch',  dv = 1, v = 1 )
cmds.setDrivenKeyframe('ikControls_grp.visibility', cd = 'ctrl_IkFk_Switch.ikFk_Switch',  dv = 0, v = 0 )

